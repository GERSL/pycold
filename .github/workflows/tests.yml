# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# Based on ~/code/xcookie/xcookie/rc/tests.yml.in
# Now based on ~/code/xcookie/xcookie/builders/github_actions.py

name: BinPy Build and Test

on:
  push:
  pull_request:
    branches: [ devel, main ]

jobs:
  lint_job:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        python -m pip install flake8
    - name: Lint with flake8
      run: |-
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./src/python/pycold --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Typecheck with mypy
      run: |-
        python -m pip install mypy
        mypy --install-types --non-interactive ./src/python/pycold
        mypy ./src/python/pycold
  build_and_test_sdist:
    name: Test sdist Python 3.8
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.8
    - name: Upgrade pip
      run: |-
        python -m pip install --upgrade pip
        python -m pip install -r requirements/tests.txt
        python -m pip install -r requirements/runtime.txt
        python -m pip install -r requirements/headless.txt
        python -m pip install -r requirements/gdal.txt
    - name: Build sdist
      shell: bash
      run: |-
        python -m pip install pip -U
        python -m pip install setuptools>=0.8 wheel build
        python -m build --sdist --outdir wheelhouse
    - name: Install sdist
      run: |-
        ls -al ./wheelhouse
        pip install wheelhouse/pycold*.tar.gz -v
    - name: Test minimal loose sdist
      run: |-
        pwd
        ls -al
        # Run in a sandboxed directory
        WORKSPACE_DNAME="testsrcdir_minimal_${CI_PYTHON_VERSION}_${GITHUB_RUN_ID}_${RUNNER_OS}"
        mkdir -p $WORKSPACE_DNAME
        cd $WORKSPACE_DNAME
        # Run the tests
        # Get path to installed package
        MOD_DPATH=$(python -c "import pycold, os; print(os.path.dirname(pycold.__file__))")
        echo "MOD_DPATH = $MOD_DPATH"
        python -m pytest --cov={self.mod_name} $MOD_DPATH ../tests
        cd ..
    - name: Test full loose sdist
      run: |-
        pwd
        ls -al
        python -m pip install -r requirements/headless.txt
        # Run in a sandboxed directory
        WORKSPACE_DNAME="testsrcdir_full_${CI_PYTHON_VERSION}_${GITHUB_RUN_ID}_${RUNNER_OS}"
        mkdir -p $WORKSPACE_DNAME
        cd $WORKSPACE_DNAME
        # Run the tests
        # Get path to installed package
        MOD_DPATH=$(python -c "import pycold, os; print(os.path.dirname(pycold.__file__))")
        echo "MOD_DPATH = $MOD_DPATH"
        python -m pytest --cov={self.mod_name} $MOD_DPATH ../tests
        cd ..
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: ./wheelhouse/*.tar.gz
  build_and_test_binpy_wheels:
    name: ${{ matrix.os }}, arch=${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        #- macOS-latest
        #- windows-latest
        cibw_skip:
        - '*-win32 *-musllinux_* *i686 pp*'
        arch:
        - auto
        #include:
        #- os: windows-latest
        #  arch: auto
        #  cibw_skip: '*-win_amd64'
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - name: Enable MSVC 64bit
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.cibw_skip == '*-win32'
    - name: Enable MSVC 32bit
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.cibw_skip == '*-win_amd64'
      with:
        arch: x86
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      if: runner.os == 'Linux' && matrix.arch != 'auto'
      with:
        platforms: all
    - name: Build binary wheels
      uses: pypa/cibuildwheel@v2.9.0
      with:
        output-dir: wheelhouse
        config-file: pyproject.toml
      env:
        CIBW_SKIP: ${{ matrix.cibw_skip }}
        CIBW_ARCHS_LINUX: ${{ matrix.arch }}
    - name: Show built files
      shell: bash
      run: ls -la wheelhouse
    - name: Set up Python 3.8 to combine coverage Linux
      uses: actions/setup-python@v4.2.0
      if: runner.os == 'Linux'
      with:
        python-version: 3.8
    - name: Combine coverage Linux
      if: runner.os == 'Linux'
      run: |-
        echo '############ PWD'
        pwd
        cp .wheelhouse/.coverage* . || true
        ls -al
        python -m pip install coverage[toml]
        echo '############ combine'
        coverage combine . || true
        echo '############ XML'
        coverage xml -o ./tests/coverage.xml || true
        echo '############ FIND'
        find . -name .coverage.* || true
        find . -name coverage.xml  || true
    - uses: codecov/codecov-action@v3
      name: Codecov Upload
      with:
        file: ./tests/coverage.xml
    - uses: actions/upload-artifact@v3
      name: Upload wheels artifact
      with:
        name: wheels
        path: ./wheelhouse/pycold*.whl
  test_deploy:
    name: Uploading Test to PyPi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && ! startsWith(github.event.ref, 'refs/tags') && ! startsWith(github.event.ref, 'refs/heads/release')
    needs:
    - build_and_test_sdist
    - build_and_test_binpy_wheels
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      name: Download wheels and sdist
      with:
        name: wheels
        path: wheelhouse
    - name: Show files to upload
      shell: bash
      run: ls -la wheelhouse
    - name: Sign and Publish
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_PASSWORD: ${{ secrets.PYPY_TEST }}
      run: |-
        pip install urllib3 pyopenssl requests[security] twine -U
        twine upload --username=__token__ --password=$TWINE_PASSWORD --repository-url "$TWINE_REPOSITORY_URL" wheelhouse/* --skip-existing --verbose || { echo "failed to twine upload" ; exit 1; }
  live_deploy:
    name: Uploading Live to PyPi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/tags') || startsWith(github.event.ref, 'refs/heads/release'))
    needs:
    - build_and_test_sdist
    - build_and_test_binpy_wheels
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      name: Download wheels and sdist
      with:
        name: wheels
        path: wheelhouse
    - name: Show files to upload
      shell: bash
      run: ls -la wheelhouse
    - name: Sign and Publish
      env:
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        TWINE_PASSWORD: ${{ secrets.PYPI }}
      run: |-
        pip install urllib3 pyopenssl requests[security] twine -U
        twine upload --username=__token__ --password=$TWINE_PASSWORD --repository-url "$TWINE_REPOSITORY_URL" wheelhouse/* --skip-existing --verbose || { echo "failed to twine upload" ; exit 1; }
